//----------------------------------------------------------------
//  Rows & Columns
//----------------------------------------------------------------
.row,
%row {
	width: 100%;
	margin: 0 auto;
	max-width: ($rowWidth) + px;
	max-width: ($rowWidth / 10) + rem;
	*zoom: 1;

	.row {
		width: auto;
		margin: 0 (-($columnGutter/2) + px);
		margin: 0 (-($columnGutter/2 / 10) + rem);
		max-width: none;
		*zoom: 1; 
	}

	&:after {
		content: " ";
		clear: both;
		display: block;
		width: 100%;
		height: 0;
	}
}

.col,
.column,
.columns,
%col,
%column,
%columns, {
	padding: 0 ($columnGutter/2) + px;
	padding: 0 ($columnGutter/2 / 10) + rem;
	position: relative;
	float: $defaultFloat;

	&:last-child {
		float: $oppositeDirection;
	}
}


//----------------------------------------------------------------
//  Block Grid
//----------------------------------------------------------------
[class*="block-grid-"],
%block-grid {
	display: block;
	padding: 0;
	margin: 0 (-($columnGutter/2) + px);
	margin: 0 (-($columnGutter/2 / 10) + rem);

	&:before, 
	&:after {
		content: " ";
		display: table; 
	}

	&:after {
		clear: both; 
	}
}

[class*="block-grid-"] > li,
%block-grid > li {
	display: block;
	height: auto;
	float: left;
	list-style: none;
	margin: 0;
	padding: 0 ($columnGutter/2) + px;
	padding: 0 ($columnGutter/2 / 10) + rem;
}


//----------------------------------------------------------------
//  Grid functions & mixins
//----------------------------------------------------------------
@function gridCalc($colNumber, $totalColumns) {
	@return percentage(($colNumber / $totalColumns));
}

@mixin grid-column($columns:false, $blockGrid:false, $push:false, $pull:false) {

	@if $columns {
		width: gridCalc($columns, $totalColumns);
	}

	@if $push { 
		#{$defaultFloat}: gridCalc($push, $totalColumns); 
		#{$oppositeDirection}: auto; 
	}

	@if $pull { 
		#{$oppositeDirection}: gridCalc($pull, $totalColumns); 
		#{$defaultFloat}: auto; 
	}
}

@mixin gridSize($sizeName, $kickIn) {

	@media only screen and (min-width: ($kickIn + px)) {

		.#{$sizeName}-hidden,
		%#{$sizeName}-hidden {
			display: none;
		}

		.#{$sizeName}-block,
		%#{$sizeName}-block {
			display: block;
		}

		.#{$sizeName}-inline,
		%#{$sizeName}-inline {
			display: inline;
		}

		.#{$sizeName}-inline-block,
		%#{$sizeName}-inline-block {
			display: inline-block;
		}

		.#{$sizeName}-text-center,
		%#{$sizeName}-text-center {
			text-align: center;
		}

		.#{$sizeName}-text-left,
		%#{$sizeName}-text-left {
			text-align: left;
		}

		.#{$sizeName}-text-right,
		%#{$sizeName}-text-right {
			text-align: right;
		}

		.#{$sizeName}-seamless,
		%#{$sizeName}-seamless {
			padding-left: 0;
			padding-right: 0;
		}

		.#{$sizeName}-has-padding,
		%#{$sizeName}-has-padding {
			padding: 0 ($columnGutter/2) + px;
			padding: 0 ($columnGutter/2 / 10) + rem;
		}

		.#{$sizeName}-push-pull-unset,
		%#{$sizeName}-push-pull-unset {
			left: unset;
			right: unset;
		}
			
		.#{$sizeName}-centered,
		%#{$sizeName}-centered {
			margin-left: auto;
			margin-right: auto;
			float: none; 
		}

		.#{$sizeName}-uncentered,
		%#{$sizeName}-uncentered {
			margin-left: 0;
			margin-right: 0;
			float: left;
		}

		.#{$sizeName}-opposite,
		%#{$sizeName}-opposite {
			float: right;
		}

		@for $i from 1 through $totalColumns {
			.#{$sizeName}#{-$i} { @include grid-column($columns:$i); }
			%#{$sizeName}#{-$i} { @include grid-column($columns:$i); }
		}

		@for $i from 1 through $totalColumns {
			.#{$sizeName}-push#{-$i} { @include grid-column($push:$i); }
			%#{$sizeName}-push#{-$i} { @include grid-column($push:$i); }
		}

		@for $i from 1 through $totalColumns {
			.#{$sizeName}-pull#{-$i} { @include grid-column($pull:$i); }
			%#{$sizeName}-pull#{-$i} { @include grid-column($pull:$i); }
		}

		@for $i from 1 through $totalColumns {
			.#{$sizeName}-block-grid#{-$i} > li,
			%#{$sizeName}-block-grid#{-$i} > li {
				width: (#{100/$i})+("%");
			}

			.#{$sizeName}-block-grid#{-$i} > li:nth-of-type(n),
			%#{$sizeName}-block-grid#{-$i} > li:nth-of-type(n) {
				clear: none;   
			}

			.#{$sizeName}-block-grid#{-$i} > li:nth-of-type(#{$i}n+1),
			%#{$sizeName}-block-grid#{-$i} > li:nth-of-type(#{$i}n+1) {
				clear: both; 
			}
		}
	}
}


//----------------------------------------------------------------
//  Default Grid - xsmall
//----------------------------------------------------------------
@media only screen {

	.xsmall-hidden,
	%xsmall-hidden {
		display: none;
	}

	.xsmall-block,
	%xsmall-block {
		display: block;
	}

	.xsmall-inline,
	%xsmall-inline {
		display: inline;
	}

	.xsmall-inline-block,
	%xsmall-inline-block {
		display: inline-block;
	}

	.xsmall-text-center,
	%xsmall-text-center {
		text-align: center;
	}

	.xsmall-text-left,
	%xsmall-text-left {
		text-align: left;
	}

	.xsmall-text-right,
	%xsmall-text-right {
		text-align: right;
	}

	.xsmall-seamless,
	%xsmall-seamless {
		padding-left: 0;
		padding-right: 0;
	}

	.xsmall-has-padding,
	%xsmall-has-padding {
		padding: 0 ($columnGutter/2) + px;
		padding: 0 ($columnGutter/2 / 10) + rem;
	}

	.xsmall-push-pull-unset,
	%xsmall-push-pull-unset {
		left: unset;
		right: unset;
	}
	
	.xsmall-centered,
	%xsmall-centered {
		margin-left: auto;
		margin-right: auto;
		float: none; 
	}

	.xsmall-uncentered,
	%xsmall-uncentered {
		margin-left: 0;
		margin-right: 0;
		float: left;
	}

	.xsmall-opposite,
	%xsmall-opposite {
		float: right;
	}

	@for $i from 1 through $totalColumns {
		.xsmall#{-$i} { @include grid-column($columns:$i); }
		%xsmall#{-$i} { @include grid-column($columns:$i); }
	}

	@for $i from 1 through $totalColumns {
		.xsmall-push#{-$i} { @include grid-column($push:$i); }
		%xsmall-push#{-$i} { @include grid-column($push:$i); }
	}

	@for $i from 1 through $totalColumns {
		.xsmall-pull#{-$i} { @include grid-column($pull:$i); }
		%xsmall-pull#{-$i} { @include grid-column($pull:$i); }
	}

	@for $i from 1 through $totalColumns {
		.xsmall-block-grid#{-$i} > li,
		%xsmall-block-grid#{-$i} > li {
			width: (#{100/$i+("%")});
		}

		.xsmall-block-grid#{-$i} > li:nth-of-type(n),
		%xsmall-block-grid#{-$i} > li:nth-of-type(n) {
			clear: none;   
		}

		.xsmall-block-grid#{-$i} > li:nth-of-type(#{$i}n+1),
		%xsmall-block-grid#{-$i} > li:nth-of-type(#{$i}n+1) {
			clear: both; 
		}
	}
}


//----------------------------------------------------------------
//  Grid Sizes
//----------------------------------------------------------------
// Additional grid sizes can be added here. The first pararmeter is
// the classs name of the grid size, the second pararmeter is it's 
// "kick-in" size, which can be a numerical value, however a variable 
// is advised as this can be reused in media queries.
@include gridSize("small", $smallScreen);
@include gridSize("medium", $mediumScreen);
@include gridSize("large", $largeScreen);