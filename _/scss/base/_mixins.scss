//----------------------------------------------------------------
//	Font Size
//----------------------------------------------------------------
//  Written as: @include fontSize(16);
@mixin fontSize($value) {

    @if $pxSupport == "true" {
    	font-size: ($value) + px;
		font-size: ($value / 10) + rem;
    }

    @else {
		font-size: ($value / 10) + rem;
    }
}


//----------------------------------------------------------------
//	Font Family
//----------------------------------------------------------------
//  NOTE: May need to be edited, depending on what formats are 
//  provided by the foundry that you are using.
//
//  Written as: @include font(Open Sans, open-sans);
@mixin font($fontName, $fontLongname) {

	@font-face {
		font-family: $fontName;
		src: url("../fonts/" + $fontLongname + "/" + $fontLongname + ".eot");
		src: url("../fonts/" + $fontLongname + "/" + $fontLongname + ".eot?#iefix") format("embedded-opentype"),
			 url("../fonts/" + $fontLongname + "/" + $fontLongname + ".woff") format("woff"),
			 url("../fonts/" + $fontLongname + "/" + $fontLongname + ".ttf") format("truetype"),
			 url("../fonts/" + $fontLongname + "/" + $fontLongname + ".svg#" + $fontName + "") format("svg");
	}	
}


//----------------------------------------------------------------
//	Border Radius
//----------------------------------------------------------------
//  NOTE: only use for defined widths, not percentages. 
//  Use  @include pre(border-radius, 50%); for percentages.
//
//  Written as: @include radius(5); OR @include radius(5, 10); || Four values max.
@mixin radius($values...) {

	$max: length($values);
	$pxValues: '';
	$remValues: '';

	@for $i from 1 through $max {
		$value: prop-count(nth($values, $i));
		$pxValues: #{$pxValues + $value}px;

		@if $i < $max {
			$pxValues: #{$pxValues + " "};
		}
	} 

	@for $i from 1 through $max {
		$value: prop-count(nth($values, $i));
		$remValues: #{$remValues + $value/10}rem;

		@if $i < $max {
			$remValues: #{$remValues + " "};
		}
	}

	@if $pxSupport == "true" {
    	-webkit-border-radius: $pxValues;
	   	   -moz-border-radius: $pxValues;
				border-radius: $pxValues;
		-webkit-border-radius: $remValues;
	   	   -moz-border-radius: $remValues;
				border-radius: $remValues;
    }

    @else {
		-webkit-border-radius: $remValues;
	   	   -moz-border-radius: $remValues;
				border-radius: $remValues;
    }
}


//----------------------------------------------------------------
//	Property & Values
//----------------------------------------------------------------
//  Written as: @include prop(top, 10); OR @include prop(margin, 20, 10); || Four values max.
@function prop-count($num) {
	@return $num / ($num * 0 + 1);
}

@mixin prop($styleProperty, $values...) {
	$max: length($values);
	$pxValues: '';
	$remValues: '';

	@for $i from 1 through $max {
		$value: prop-count(nth($values, $i));
		$pxValues: #{$pxValues + $value}px;

		@if $i < $max {
			$pxValues: #{$pxValues + " "};
		}
	} 

	@for $i from 1 through $max {
		$value: prop-count(nth($values, $i));
		$remValues: #{$remValues + $value/10}rem;

		@if $i < $max {
			$remValues: #{$remValues + " "};
		}
	}

	@if $pxSupport == "true" {
    	#{$styleProperty}: $pxValues; 
		#{$styleProperty}: $remValues; 
    }

    @else {
		#{$styleProperty}: $remValues; 
    }
}


//----------------------------------------------------------------
//	Border
//----------------------------------------------------------------
//  Written as: @include border(1, solid, #000);
@mixin border($width, $style, $color, $side:"false") {

	@if $pxSupport == "true" {
    	
    	@if $side == "false" {
			border: ($width)+px $style $color;
			border: ($width / 10)+rem $style $color;
		}

		@else {
			border#{-$side}: ($width)+px $style $color;
			border#{-$side}: ($width / 10)+rem $style $color;
		}
    }

    @else {
		
		@if $side == "false" {
			border: ($width / 10)+rem $style $color;
		}

		@else {
			border#{-$side}: ($width / 10)+rem $style $color;
		}
    }
}


//----------------------------------------------------------------
//	Transition
//----------------------------------------------------------------
@mixin trans($effect...) {
	-webkit-transition: $effect;
	   -moz-transition: $effect;
			transition: $effect;
}


//----------------------------------------------------------------
//	Square
//----------------------------------------------------------------
@mixin sq($value) {
	@if $pxSupport == "true" {
    	width: ($value)+px; 
		width: ($value / 10)+rem;
		height: ($value)+px; 
		height: ($value / 10)+rem; 
    }

    @else {
		width: ($value / 10)+rem;
		height: ($value / 10)+rem; 
    }
}


//----------------------------------------------------------------
//	Browser Pre-Fix
//----------------------------------------------------------------
//  Written as: @include pre(transition, color 0.3s ease); OR @include pre(border-radius, 50%);
@mixin pre($attr, $value) {
	-webkit-#{$attr}: $value;
   	   -moz-#{$attr}: $value;
   	    -ms-#{$attr}: $value;
			#{$attr}: $value;
}